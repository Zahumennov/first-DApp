@test
module;

import ^^.accounts;
import auth_ext: ^^.auth.external;
import ^^.auth.{ signature };
import ^^.auth.external.{ get_auth_message_template };
import ^^.accounts.{ eth_auth_args };
import ^^.auth. { create_message_from_template };
import ^^.utils. { evm_address_from_pubkey };

/*
 * Creates an ft_auth operation for a specific pubkey.
 * If more than one auth_desciptor exists for the pubkey, first one found is chosen.
 */
function ft_auth_operation_for(pubkey) {
    val descriptor = require(
        accounts.auth_descriptor_participant @? { pubkey }.account_auth_descriptor limit 1,
        "No auth descriptor found for pubkey %s".format(pubkey)
    );

    return auth_ext.ft_auth(descriptor.account.id, descriptor.id);
}

/*
 * Creates an evm_auth operation by signing an operation using [evm_sign].
 * The associated account is derived from the evm privkey. If more than one auth_descriptor exists the first one will be chosen.
 */
function evm_auth_operation_for(evm_privkey: byte_array, op_name: text, args: list<gtv> = []) {
    val evm_address = evm_address_from_privkey(evm_privkey);
    val descriptor = require(
        accounts.auth_descriptor_participant @? { evm_address }.account_auth_descriptor limit 1,
        "No auth descriptor found for address %s".format(evm_address)
    );
    val eth_message = create_message_from_template(
        eth_auth_args(
            account = descriptor.account,
            descriptor,
            signatures = []
        ),
        get_auth_message_template(op_name, args.to_gtv()),
        args,
        descriptor.ctr
    );
    val evm_signature = evm_sign(eth_message, evm_privkey);
    return auth_ext.evm_auth(descriptor.account.id, descriptor.id, [evm_signature]);
}
/*
 * Signs a message using an evm key.
 */ 
function evm_sign(message: text, evm_privkey: byte_array): signature {
    val sig = crypto.eth_sign(
            keccak256(("\u0019Ethereum Signed Message:\n" + message.size().to_text() + message).to_bytes()),
            evm_privkey
        );

    return signature(
            r=sig[0],
            s=sig[1],
            v=sig[2] + 27
        );
}


function evm_address_from_privkey(privkey: byte_array) = evm_address_from_pubkey(crypto.privkey_to_pubkey(privkey).sub(1));
