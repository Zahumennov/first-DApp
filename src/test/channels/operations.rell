function test_create_channel() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    top_up_user_balance_by_admin(alice_evm_address, 10);
    
    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 1"))
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 2"))
        .sign(alice_kp)
        .run();

    val user = user @ { .id == alice_evm_address };    
        
    assert_equals(channel @ { } (@sum 1), 2);
    assert_equals(channel_member @ { } (@sum 1), 2);
    assert_equals(user.balance, 4);
}

function test_create_channel_with_wrong_sign() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    
    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 1"))
        .sign(bob_kp)
        .run_must_fail("The participant is not the signer of this transaction");
}

function test_create_channel_with_wrong_name() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    top_up_user_balance_by_admin(alice_evm_address, 10);
    
    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice channel 1"))
        .sign(alice_kp)
        .run_must_fail("Channel name cannot be longer than 12 letters");
}

function test_create_channel_with_not_unique_name() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    top_up_user_balance_by_admin(alice_evm_address, 10);

    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 1"))
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 1"))
        .sign(alice_kp)
        .run_must_fail("Chanel name must be unique");        
}


function test_create_channel_with_wrong_balance() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    
    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 1"))
        .sign(alice_kp)
        .run_must_fail("Not enough balance");
}


function test_connect_member_to_channel() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    top_up_user_balance_by_admin(alice_evm_address, 10);

    invite_user_by_admin(bob_evm_address);
    val bob_signature = evm_sign(evm.get_register_message(bob_evm_address), bob_evm_privkey);
    rell.test.tx()
        .op(create_user("Bob", bob_evm_address, bob_signature))
        .sign(bob_kp)
        .run();
    
    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 1"))
        .sign(alice_kp)
        .run();

    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(connect_member_to_channel(bob_evm_address, "Alice chan 1"))
        .sign(alice_kp)
        .run();

    assert_equals(channel_member @ { } (@sum 1), 2);
}

function test_connect_member_to_not_exists_channel() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    top_up_user_balance_by_admin(alice_evm_address, 10);

    invite_user_by_admin(bob_evm_address);
    val bob_signature = evm_sign(evm.get_register_message(bob_evm_address), bob_evm_privkey);
    rell.test.tx()
        .op(create_user("Bob", bob_evm_address, bob_signature))
        .sign(bob_kp)
        .run();
    
    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 3"))
        .sign(alice_kp)
        .run();

    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(connect_member_to_channel(bob_evm_address, "Alice chan 1"))
        .sign(alice_kp)
        .run_must_fail("Channel with name Alice chan 1 does not exist");
}

function test_connect_not_exists_member_to_channel() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    top_up_user_balance_by_admin(alice_evm_address, 10);
    
    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 1"))
        .sign(alice_kp)
        .run();

    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(connect_member_to_channel(bob_evm_address, "Alice chan 1"))
        .sign(alice_kp)
        .run_must_fail("User with id %s does not exist".format(bob_evm_address));
}

function test_connect_member_to_channel_twice() {
    invite_user_by_admin(alice_evm_address);
    create_user_alice();
    top_up_user_balance_by_admin(alice_evm_address, 10);

    invite_user_by_admin(bob_evm_address);
    val bob_signature = evm_sign(evm.get_register_message(bob_evm_address), bob_evm_privkey);
    rell.test.tx()
        .op(create_user("Bob", bob_evm_address, bob_signature))
        .sign(bob_kp)
        .run();
    
    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(register_channel("Alice chan 1"))
        .sign(alice_kp)
        .run();

    rell.test.tx()
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(connect_member_to_channel(bob_evm_address, "Alice chan 1"))
        .op(ft_auth_operation_for(alice_kp.pub))
        .op(connect_member_to_channel(bob_evm_address, "Alice chan 1"))
        .sign(alice_kp)
        .run_must_fail("Member already exists");
}