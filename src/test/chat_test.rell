@test module;

import user.*;

val alice = rell.test.pubkeys.alice;
val bob = rell.test.pubkeys.bob;
val trudy = rell.test.pubkeys.trudy;
val dave = rell.test.keypairs.dave;

val admin = rell.test.keypair(
    priv = x"1EE41B765EEDA1455DA527197001C03780ACEDD118FC5561A751B16B926A804A",
    pub = x"03B71E579C71DAEA9A9577F6B8B30D5E95DF7B4CB3168E6CFB98DA73C30AE5E952"
);

function test_create_user() {
    rell.test.tx()
        .op(create_user("Alice", alice))
        .op(create_user("Bob", bob))
        .run();
    val users = user @* { };

    assert_equals(users.size(), 2);
    assert_equals(users[0].balance, 0);
    assert_equals(users[1].balance, 0);
}

function test_create_user_with_wrong_name() {
    rell.test.tx()
        .op(create_user("1234567890123456", trudy))
        .run_must_fail();
}

function test_top_up_balance() {
    rell.test.tx()
        .op(create_user("Alice", alice))
        .op(top_up_user_balance(alice, 10))
        .sign(admin)
        .run();

    val user = user @ { .id == alice };
    assert_equals(user.balance, 10);
}

function test_top_up_balance_with_wrong_amount() {
    rell.test.tx()
        .op(create_user("Alice", alice))
        .op(top_up_user_balance(alice, -10))
        .sign(admin)
        .run_must_fail();
}

function test_top_up_balance_as_non_admin() {
    rell.test.tx()
        .op(create_user("Alice", alice))
        .op(top_up_user_balance(alice, 10))
        .sign(dave)
        .run_must_fail();
}
